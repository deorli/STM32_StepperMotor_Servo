################################################################################################
#   File           : main_Makefile
#   Brief          : This file contains simple system for software building
#					 with flashing process for SMT32F3 microcontroller
#					 along with static analisis.
#	############################################################################################
#   Copyright (c) Bator Mateusz 
#   email: deorli@o2.pl
#   
#   All rights reserved.
#   
#   This software is licensed under terms that can be found in the LICENSE file
#   in the root directory of this software project.
################################################################################################

######################################### ↓ Includes ↓ #########################################
include Makefiles/config_Makefile
include Core/Makefile

######################################### ↓ Variables ↓ ########################################
# Application name
TARGET = stepper_servo

ifeq ($(MAKECMDGOALS),$(filter $(MAKECMDGOALS), DebugApp DebugApp-flash clean-DebugApp))
BUILD_DIR = .build_debug
else
BUILD_DIR = .build
endif

# Flags to add debug information in out files
ifeq ($(MAKECMDGOALS),$(filter $(MAKECMDGOALS), DebugApp DebugApp-flash))
CFLAGS += -g -gdwarf-2
endif

# List of C objects files
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(SOURCES)))

# List of ASM objects files
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

EXCLUDE_OPTS := $(foreach dir,$(EXCLUDED_DIRS),-path $(dir) -prune -o)

HEADERS_WITH_DIR :=$(shell \
    find $(ROOT_DIR) $(EXCLUDE_OPTS) \
    -type f -name "*.h" -print)

HEADERS_CPPCHECK := $(subst -I,,$(INCLUDES))

########################################### ↓ Rules ↓ ##########################################
# Create an object file from soruce files
$(BUILD_DIR)/%.o: %.c $(HEADERS_WITH_DIR)| $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	@$(eval RECOMPILED_FILES := $(RECOMPILED_FILES) $<)

# Create an object file from ASM files
$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

# Build .elf file
$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

# Build .hex file from .elf
$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

# Build .bin file from .elf
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	

$(BUILD_DIR):
	mkdir $@

# Headers
print_compilation_start: 
	@echo
	@echo	'############################    START COMPILATION    ############################'
	@echo

print_clean_start: 
	@echo
	@echo	'###############################    CLEAN BUILD    ###############################'
	@echo

print_flash_start: 
	@echo
	@echo	'##########################   FLASHING PROSESS START    ##########################'
	@echo

print_cppcheck_start:
	@echo
	@echo	'#############################    STATIC ANALISIS    #############################'
	@echo

######################################### ↓  Main Rules ↓ #######################################
# Deletion of compilation files
clean-App clean-DebugApp: print_clean_start
	-rm -fR $(BUILD_DIR)

# Application compilation without and with debugging information
App DebugApp: print_compilation_start $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).bin
#	Check and print information on which files have been compiled/recompiled
	@if [ -z "$(RECOMPILED_FILES)" ]; then \
		echo 'All files are up to date'; \
	else \
		echo	'---------------------------------------------------------------------------------'; \
		echo 'Compiled files:'; \
		$(foreach file,$(RECOMPILED_FILES), echo "                  $(file)";) \
		echo	'---------------------------------------------------------------------------------'; \
	fi

# Flash application without debugging information
App-flash: clean-App App flash-process reset 

# Flash application with debugging information
flash-debug: clean-debug debug flash-process reset

# Flash process
flash-process: print_flash_start
	openocd \
	-f interface/stlink.cfg -f target/stm32f3x.cfg \
	-c "init" -c "reset halt" \
	-c "flash write_image erase $(BUILD_DIR)/$(TARGET).bin 0x08000000" \
	-c "verify_image $(BUILD_DIR)/$(TARGET).bin" -c "reset" -c "shutdown"

# Microcontroller reset
reset:
	openocd \
	-f interface/stlink.cfg -f target/stm32f3x.cfg \
	-c "init" -c "reset" -c "shutdown"

static-analisis: cppcheck-process

# Static analysis using cppcheck 
cppcheck-process: print_cppcheck_start
	@if [ -z "$(HEADERS_CPPCHECK)" ]; then \
	    echo "Error: HEADERS_CPPCHECK is empty"; \
	    exit 1; \
	fi

	@RESULT_FILE=$$(mktemp /tmp/cppcheck_result.XXXXXX); \
	$(CPPCHECK) \
	--platform=win64 \
	--force \
	--quiet \
	--enable=all \
	--error-exitcode=1 \
	--inline-suppr \
	--suppress=missingIncludeSystem \
	$(foreach dir,$(HEADERS_CPPCHECK),-I $(dir)) \
	$(SOURCES) 2> $$RESULT_FILE; \
	EXIT_CODE=$$?; \
	\
	if [ $$EXIT_CODE -eq 0 ]; then \
	    echo "Cppcheck: No issues found."; \
	else \
	    echo "Cppcheck: Issues found."; \
		cat $$RESULT_FILE; \
		ERROR_COUNT=$$(grep -E 'error:|style:' $$RESULT_FILE | sort | uniq | wc -l); \
	    echo "Number of issues found: $$ERROR_COUNT"; \
	fi; \
	
	@rm -f $$RESULT_FILE
